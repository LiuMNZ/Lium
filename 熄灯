– 有一个由按钮组成的矩阵, 其中每行有6个按钮, 共5行
– 每个按钮的位置上有一盏灯
– 当按下一个按钮后, 该按钮以及周围位置(上边, 下边, 左 边, 右边)的灯都会改变状态
  
– 如果灯原来是点亮的, 就会被熄灭 – 如果灯原来是熄灭的, 则会被点亮
• 在矩阵角上的按钮改变3盏灯的状态
• 在矩阵边上的按钮改变4盏灯的状态 
• 其他的按钮改变5盏灯的状态
 与一盏灯毗邻的多个按钮被按下时,一个操作会抵消另一次操 作的结果
 给定矩阵中每盏灯的初始状态，求一种按按钮方案，使得所有 的灯都熄灭
 输入:
– 第一行是一个正整数N, 表示需要解决的案例数 – 每个案例由5行组成, 每一行包括6个数字
– 这些数字以空格隔开, 可以是0或1
– 0 表示灯的初始状态是熄灭的
– 1 表示灯的初始状态是点亮的
 输出:
– 对每个案例, 首先输出一行,
输出字符串 “PUZZLE #m”, 其中m是该案例的序 号
– 接着按照该案例的输入格式输出5行
• 1 表示需要把对应的按钮按下
• 0 表示不需要按对应的按钮
• 每个数字以一个空格隔开
 样例输入                    
2                                    
011010 
100111 
001001 
100101 
011100 
001010 
101011 
001011 
101100 
010100
 样例输出
PUZZLE #1
1010 01
1 1 01 0 1
0010 11
1001 00
0100 00
PUZZLE #2
1001 11
1100 00
0 0 01 0 0
1101 01
1011 01
#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;
char oriLight[5];//初始
char lights[5];//变化
char result[5];//最终方案
int GetBit(char c,int i){//可以取字符c的第i个比特
    return (c>>i)&1;
}//c右移i位，则第i位到第一位，再&1（1的第1位为1，其他是0，所以&出来的结果要么是1，要么是0）
void SetBit(char &c,int i,int v){//设置字符c的第i位为v;
    //在C语言中这个符号表示了取地址符，但是在C++中它却有着不同的用途
    //注意是char &c,在c++里加&相当于是引用，就可以改变了：传递引用给函数与传递指针的效果是一样的。
    //即改变了型参，实参也跟着变
    if(v)//v是1，即把c的第i位置成1
        c|=(1<<i);//1左移i位
    else//v是0：使第i位为0，其他位不变
        c&=~(1<<i);//(1<<i)只有第i位为1，其他位为0；取反变成只有第i位为0，其他为1；
}
void FlipBit(char &c,int i){//把字符c的第i位翻转;使用异或（跟1能反转，跟0不变）
    c^=(1<<i);
}
void OutputResult(int t,char result[]){
    cout<<"PUZZLE #"<<t<<endl;
    for(int i=0;i<5;++i){
        for(int j=0;j<6;++j){
            cout<<GetBit(result[i], j);//输出result[i]的第j个比特
            if(j<5)cout<<" ";
        }
    cout<<endl;
    }
}
int main(){
    int t;
    cin>>t;
    char switchs;
    for(int count=1;count<=t;count++){
        memset(oriLight,0,sizeof(oriLight));
            for(int i=0;i<5;i++)
                for(int j=0;j<6;++j){
                    int s;
                    cin>>s;//i行j列灯的状态；
                    SetBit(oriLight[i], j,s);
                }
            for(int n=0;n<64;++n){//每一个n都代表第一行开关的一个状态
                memcpy(lights, oriLight, sizeof(oriLight));//把oriLight复制到lights
                switchs=n;
            for(int i=0;i<5;++i){//第i行开关已经确定，接下来对第i行的灯进行处理
                result[i]=switchs;
                for(int j=0;j<6;++j){
                    if(GetBit(switchs, j)){//如果为1，则进行处理j
                        if(j>0)
                            FlipBit(lights[i], j-1);
                        FlipBit(lights[i], j);
                        if(j<5)
                            FlipBit(lights[i], j+1);
                    }
                }
                if(i<4)
                    lights[i+1]^=switchs;
                switchs=lights[i];
            }//循环跑完，到这里可以确保前四行都灭，下面只需要看第五行是不是熄灭
            if(lights[4]==0){
                OutputResult(count, result);
                break;
            }
        }
    }
    return 0;
}

/*摁两次开关相当于没有摁，所以不论摁多少次，都只是相当于摁0次或1次
所有摁下的开关没有先后（从样例输出就可以看出）
如果都枚举一遍，则一共有2^30种可能，太多了，超时
所以可以枚举局部，所以关键就是找最好的局部：
第一行就是这样一个局部，因为一旦第一行的某个开关被按下，要想改变状态，只能通过第二行（不能通过第一行，因为如果摁两次相当于没摁），相应的第二行的状态就会被改变，要想改变第二行，只能通过第一行。而且只能是同列的，因为如果是不同列的，就会导致上一行这个不同列的灯的状态被改变......以此类推。
这样一看，只需要判断第一行的2^6种情况，直接就简单多了，哈哈。
位运算，利用二进制
